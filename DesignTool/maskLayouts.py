"""

Mask layouts for DEIMOS and other instruments.

Original coordinates are taken from foc_plane.dat in dsimulator.
Coordinates are flipped in y and shifted by 318, y = 318 - yOld.

Format: (x, y, flag), 
flag: 0: start vertex, 1: next vertex, 2: close polygon

Date: 2018-07-19
Author: Shui Hung Kwok
Initial version
"""
import math

MaskLayouts = {    
    "deimos": (        
        (-502.02000000003864, 189.68199999999996, 0),
        (-259.7114999999974, 189.87700000000004, 1),
        (-261.7020000000366, 481.02299999999934, 1),
        (-424.812000000054, 481.4310000000004, 1),
        (-502.3485000000278, 405.1720000000008, 1),
        (-502.02000000003864, 189.68199999999996, 2),
        (-249.69300000001908, 189.31899999999877, 0),
        (-6.221999999996797, 188.48200000000008, 1),
        (-6.286500000038586, 424.21600000000086, 1),
        (-19.249500000000808, 424.39399999999966, 1),
        (-32.39250000002016, 425.31699999999967, 1),
        (-46.27500000006535, 427.3490000000002, 1),
        (-59.1030000000103, 429.87700000000075, 1),
        (-71.6310000000476, 432.80200000000036, 1),
        (-80.16000000000076, 435.19499999999965, 1),
        (-88.10700000004204, 437.5970000000002, 1),
        (-101.35050000006345, 442.10899999999936, 1),
        (-110.67900000004443, 445.96500000000066, 1),
        (-120.00900000002162, 449.95299999999963, 1),
        (-128.13900000001013, 453.9419999999998, 1),
        (-137.1945000000153, 458.5270000000006, 1),
        (-146.79750000001945, 464.1790000000009, 1),
        (-154.88250000001926, 469.5549999999993, 1),
        (-162.3899999999935, 474.5489999999993, 1),
        (-170.25450000003843, 480.6649999999994, 1),
        (-233.36700000000405, 480.0269999999992, 1),
        (-233.31900000002292, 482.79700000000054, 1),
        (-250.3995000000259, 482.79499999999973, 1),
        (-249.69300000001908, 189.31899999999877, 2),
        (5.6834999999750835, 188.2109999999995, 0),
        (249.62849999992613, 188.2409999999989, 1),
        (248.98049999997625, 481.5660000000001, 1),
        (168.53699999997502, 481.2520000000004, 1),
        (158.94149999995193, 476.3070000000004, 1),
        (147.90599999998335, 468.80800000000045, 1),
        (141.50849999996922, 464.6600000000004, 1),
        (133.35149999994655, 459.7140000000008, 1),
        (122.31749999997419, 454.1299999999994, 1),
        (111.1214999999504, 448.70600000000064, 1),
        (99.12749999994617, 443.7599999999994, 1),
        (86.33399999996527, 439.13300000000066, 1),
        (77.37749999996595, 435.9420000000001, 1),
        (66.82199999996215, 433.07100000000014, 1),
        (58.505999999982805, 431.15599999999995, 1),
        (50.66999999996824, 429.5610000000003, 1),
        (41.873999999972966, 428.1250000000005, 1),
        (29.560499999956846, 426.2100000000004, 1),
        (17.885999999964497, 425.09299999999985, 1),
        (5.411999999944328, 424.2959999999998, 1),
        (5.6834999999750835, 188.2109999999995, 2),
        (258.65550000000326, 189.73999999999955, 0),
        (496.7774999999733, 188.5599999999998, 1),
        (497.00849999995285, 195.9129999999996, 1),
        (491.8754999999692, 196.32999999999873, 1),
        (493.26299999999605, 231.3450000000015, 1),
        (500.4674999999679, 231.06500000000128, 1),
        (501.16799999993873, 283.68000000000103, 1),
        (493.41449999997167, 283.8120000000003, 1),
        (493.08899999997493, 316.5670000000011, 1),
        (501.71100000000024, 316.8960000000012, 1),
        (499.0604999999391, 335.4240000000011, 1),
        (491.76449999999363, 329.4700000000013, 1),
        (472.5344999999436, 348.9939999999997, 1),
        (479.0654999999788, 356.0510000000007, 1),
        (352.2104999999499, 481.11800000000034, 1),
        (258.920999999998, 480.86200000000025, 1),
        (258.65550000000326, 189.73999999999955, 2),
        (11.294999999975978, 190.3219999999991, 0),
        (19.92899999997598, 190.3219999999991, 1),
        (19.92899999997598, 198.4159999999991, 1),
        (11.294999999975978, 198.4159999999991, 1),
        (11.294999999975978, 190.3219999999991, 2),
        (178.8044999999947, 191.42899999999912, 0),
        (184.9604999999947, 191.42899999999912, 1),
        (184.9604999999947, 197.56099999999913, 1),
        (178.8044999999947, 197.56099999999913, 1),
        (178.8044999999947, 191.42899999999912, 2),
        ),

    "deimos_plain": (
        (-498.0, 187.0, 0),  # mask x,y;  NB in arcsec on sky; sense depends on this
        (-498.0, 332.0, 1),
        (-460.0, 385.0, 1),
        (-420.0, 428.0, 1),
        (-360.0, 479.0, 1),
        (-259.7, 479.0, 1),
        (-259.7, 187.0, 1),
        (-498.0, 187.0, 2),
        (-249.3, 187.0, 0),
        (-249.3, 479.0, 1),
        (-5.2, 479.0, 1),
        (-5.2, 187.0, 1),
        (-249.3, 187.0, 2),
        (5.2, 187.0, 0),
        (5.2, 479.0, 1),
        (249.3, 479.0, 1),
        (249.3, 187.0, 1),
        (5.2, 187.0, 2),
        (259.7, 187.0, 0),
        (259.7, 479.0, 1),
        (360.0, 479.0, 1),
        (420.0, 428.0, 1),
        (460.0, 385.0, 1),
        (498.0, 332.0, 1),
        (498.0, 187.0, 1),
        (259.7, 187.0, 2),
    ),
    "deimos_no_gap": (
        (-498.0, 187.0, 0),  # mask x,y;  NB in arcsec on sky; sense depends on this
        (-498.0, 332.0, 1),
        (-460.0, 385.0, 1),
        (-420.0, 428.0, 1),
        (-360.0, 479.0, 1),

        (360.0, 479.0, 1),
        (420.0, 428.0, 1),
        (460.0, 385.0, 1),
        (498.0, 332.0, 1),
        (498.0, 187.0, 1),

        (-498.0, 187.0, 2),
    ),
    "lris": ((-100, -100, 0), (100, -100, 1), (100, 100, 1), (-100, 100, 2)),
}

GuiderFOVs = {
    "deimos": (
        (206.73299999997425, 97.60299999999904, 0),
        (205.70999999999913, 97.03699999999935, 1),
        (-4.15350000005219, 93.6319999999998, 1),
        (-7.506000000029189, 303.49100000000016, 1),
        (202.40099999996346, 307.13100000000003, 1),
        (206.73299999997425, 97.60299999999904, 2),
        (-5.179500000019743, 177.76599999999863, 0),
        (205.3799999999626, 176.1119999999998, 1),
        (205.3799999999626, 176.1119999999998, 2),
   ),
    "lris": ((-206.73084339999997, 238.9636564, 0)),
}

BadColumns = {
    "deimos": (
        (-377.2815000000378, 189.64100000000008, 0),
        (-379.09500000006346, 481.4640000000002, 1),
        (-379.09500000006346, 481.4640000000002, 2),
        (-204.8865000000319, 189.11599999999865, 0),
        (-205.5000000000689, 480.37400000000025, 1),
        (-205.5000000000689, 480.37400000000025, 2),
        (107.0819999999685, 188.3449999999996, 0),
        (106.70249999995463, 447.40100000000047, 1),
        (106.70249999995463, 447.40100000000047, 2),
        (376.4294999999379, 189.58499999999972, 0),
        (377.12999999995986, 457.18200000000024, 1),
        (377.12999999995986, 457.18200000000024, 2),
        (346.8074999999317, 189.91099999999946, 0),
        (347.1494999999379, 481.72599999999954, 1),
        (347.1494999999379, 481.72599999999954, 2),
        (213.55199999994738, 188.496999999999, 0),
        (213.03449999997497, 481.59300000000064, 1),
        (213.03449999997497, 481.59300000000064, 2),
        (264.08999999994194, 190.28899999999953, 0),
        (264.59399999994844, 424.33500000000043, 1),
        (264.59399999994844, 424.33500000000043, 2),
    )
}


def shrinkMask(mask, margin=0.5):
    """
    mask is a list of points describing the mask
    t is the size of the margin (the mount to reduce the mask)

    For example: 
        reducedMask = shrinkMask (mask, margin=0.5)
    """

    def normalize(dx, dy):
        h = math.hypot(dx, dy)
        if h > 0:
            return dx / h, dy / h
        else:
            return 0, 0

    def intersect(a1, b1, c1, a2, b2, c2):
        det = a1 * b2 - a2 * b1
        x = (c1 * b2 - c2 * b1) / det
        y = (a1 * c2 - a2 * c1) / det
        return x, y

    def calc(x0, y0, x1, y1, x2, y2, t):
        ux1, uy1 = normalize(x1 - x0, y1 - y0)
        ux2, uy2 = normalize(x2 - x1, y2 - y1)
        c1 = (x1 - uy1 * t) * uy1 - (y1 + ux1 * t) * ux1
        c2 = (x1 - uy2 * t) * uy2 - (y1 + ux2 * t) * ux2

        return intersect(uy1, -ux1, c1, uy2, -ux2, c2)

    """
    Shrink mask from all sides
    """
    state = 0
    flag1 = 0
    xStart, yStart, flag = mask[0]
    out = []
    for x, y, flag in mask:
        if flag == 0:
            xStart, yStart = x, y
            x0, y0 = x, y
            x1, y1 = x, y
            x2, y2 = x, y
        elif flag == 1:
            if state == 0:
                xStart1, yStart1 = x, y
            if state < 2:
                state += 1
            x0, y0 = x1, y1
            x1, y1 = x2, y2
            x2, y2 = x, y
        elif flag == 2:
            state = 3
            x0, y0 = x1, y1
            x1, y1 = x2, y2
            x2, y2 = xStart, yStart
        if state == 2:
            # print (f"({x0}, {y0})  ({x1}, {y1})  ({x2}, {y2}), flg={flag})")
            x, y = calc(x0, y0, x1, y1, x2, y2, margin)
            out.append((x, y, flag1))
            if flag1 == 0:
                ox0, oy0 = x, y
            flag1 = 1
        if state == 3:
            # print (f"({x0}, {y0})  ({x1}, {y1})  ({x2}, {y2}), flg={flag})")
            # print (f"({x1}, {y1})  ({x2}, {y2})  ({xStart1}, {yStart1}), flg={flag})")

            x, y = calc(x0, y0, x1, y1, x2, y2, margin)
            out.append((x, y, 1))

            x, y = calc(x1, y1, x2, y2, xStart1, yStart1, margin)
            out.append((x, y, 1))
            out.append((ox0, oy0, 2))
            flag1 = 0
            # print()
            state = 0
    return out

def scaleLayout (layout, scale, offx, offy):
    return [ (x*scale+offx, y*scale+offy, t) for x, y, t in layout]
